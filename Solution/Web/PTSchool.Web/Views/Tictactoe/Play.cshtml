@model PTSchool.Web.Models.Tictactoe.UserGameViewModel

@{
    ViewData["Title"] = "Play";
}

@{
    string letter = string.Empty;
}

<div class="container">
    <div class="row justify-content-center align-items-center">
        <h1 onmouseover="this.style.fontSize='50px'" onmouseout="this.style.fontSize='40px'">TicTacToe<strong>Play!</strong></h1>
    </div>
    <hr style="height: 5px;" class="bg-danger" />
</div>

<div class="container">
    <div>
        @if (Model.GameHost == Model.NameUser)
        {
            letter = "X";
            <p>You are a Host.</p>
            <p>You are playing with <img id="imgX" alt="imageX" src="~/tictactoe_X.png" style="height: 25px; width: 25px" />.</p>
        }
        else
        {
            letter = "O";
            <p>You are a Guest.</p>
            <p>You are playing with <img id="imgO" alt="imageO" src="~/tictactoe_O.png" style="height: 25px; width: 25px" />.</p>
        }
        <div id="joinedMessageParagraph" class="text-success"></div>
    </div>
    <hr />

    <div>
        <div class="row">
            <img class="border field-image" id="img1" alt="image1" src="/tictactoe_null.png" style="height: 100px; width: 100px" />
            <img class="border field-image" id="img2" alt="image2" src="/tictactoe_null.png" style="height: 100px; width: 100px" />
            <img class="border field-image" id="img3" alt="image3" src="/tictactoe_null.png" style="height: 100px; width: 100px" />
        </div>
        <div class="row">
            <img class="border field-image" id="img4" alt="image4" src="/tictactoe_null.png" style="height: 100px; width: 100px" />
            <img class="border field-image" id="img5" alt="image5" src="/tictactoe_null.png" style="height: 100px; width: 100px" />
            <img class="border field-image" id="img6" alt="image6" src="/tictactoe_null.png" style="height: 100px; width: 100px" />
        </div>
        <div class="row">
            <img class="border field-image" id="img7" alt="image7" src="/tictactoe_null.png" style="height: 100px; width: 100px" />
            <img class="border field-image" id="img8" alt="image8" src="/tictactoe_null.png" style="height: 100px; width: 100px" />
            <img class="border field-image" id="img9" alt="image9" src="/tictactoe_null.png" style="height: 100px; width: 100px" />
        </div>
    </div>
    <hr />
</div>

<div class="container">
    <div id="message-holder" class="mt-3 d-flex justify-content-start">
        <h4>Message</h4>
        <input class="w-75 ml-4 pl-3" type="text" id="messageInput" placeholder="Message..." />
        <button id="sendButton" class="ml-4 btn btn-lg">Send</button>
    </div>
    <hr style="height: 5px;" />
    <div id="messagesList" style="font-size: 24px;">
    </div>
</div>

<div class="container">
    <hr style="height: 5px;" class="bg-danger" />
    <div class="row justify-content-center align-items-center">
        @if(Model.GameHost == Model.NameUser)
        {
        <div>
            <a class="btn btn-large btn-danger text-dark" id="restartGame">RESTART!</a>
        </div>
        }
        <div>
            <a class="btn btn-large btn-danger text-white" onclick="window.location='@Url.Action("Menu", "Tictactoe")'">BACK TO MENU</a>
        </div>
    </div>
</div>

@section Scripts {
<script>

let chatSoundSrc = "/chat_notification_short.wav";
let chatSound = new Audio(chatSoundSrc);

//CREATE SIGNALR CONNECTION
var myConnection = new signalR.HubConnectionBuilder().withUrl("/playhubbb").build();

//WAIT 0.5 SEC AND JOIN(CREATE) GROUP (=> HUB(C#))
setTimeout(() => myConnection.invoke("JoinGroupCSharp", '@Model.GameId', '@Model.NameUser', '@Model.GameHost'), 500);

//RECEIVE MESSAGE FOR JOINED!
myConnection.on("JoinedMessageJS",
    function (message) {
        const now = new Date();
        let text = `${now.toUTCString()} | ${message.user} ${message.text}`;
        $("#joinedMessageParagraph").append(text);
    });

//TICTACTOE!!!
//Play move! receive from Hub(C#)
myConnection.on("MovePlayedJS",
function (message) {
    if (document.getElementById(`${message.user}`).getAttribute('src') == "/tictactoe_null.png")
    {
        $("#" + message.user).attr("src", `/tictactoe_${message.text}.png`);
    }
});

//Play move! on click => send to Hub(C#)
$(".field-image").click(function () {
    //let that = this;
    var imgNumber = this.id;
    var letterOfPlayer = '@letter';
    var gameId = '@Model.GameId';
    myConnection.invoke("PlayMoveCSharp", imgNumber, letterOfPlayer, gameId);
});


//Restart game! receive from Hub(C#)
myConnection.on("GameRestartedJS",
    function () {
        $(".field-image").attr("src", `/tictactoe_null.png`)
    });

//Restart game! on click => send to Hub(C#)
    $("#restartGame").click(function () {
        var gameId = '@Model.GameId';
        myConnection.invoke("RestartGameCSharp", gameId);
    });

//CHAT!!!
//Receive message! receive from Hub(C#)
myConnection.on("ReceiveMessageJS",
    function (message) {
        var chatInfo = `<div>${message.user}: ${escapeHtml(message.text)}</div>`;
        $("#messagesList").append(chatInfo);
        chatSound.play();
    });

//Send message! => send to Hub(C#)
$("#sendButton").click(function () {
    var message = $("#messageInput").val();
    var gameId = '@Model.GameId';
    myConnection.invoke("SendMessageCSharp", message, gameId);
    $("#messageInput").val("");
});

myConnection.start().catch(function (err) {
    return console.error(err.toString());
});

//PT: To escape HTML injection in chat:
function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}
</script>
}