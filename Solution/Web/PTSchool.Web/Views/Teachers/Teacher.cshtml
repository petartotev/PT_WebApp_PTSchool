@model PTSchool.Web.Models.Teacher.TeacherByIdFullViewModel

@{
    ViewData["Title"] = "Teacher";
}

@{ 
    string name = $"{Model.TeacherProfileFullById.FirstName} {Model.TeacherProfileFullById.LastName}";
    string colorByRole = string.Empty;
    string averageMarkRounded = $"{@Model.TeacherProfileFullById.AverageMark:F2}";
    if (User.IsInRole("Student"))
    {
        colorByRole = "success";
    }
    else if (User.IsInRole("Teacher"))
    {
        colorByRole = "primary";
    }
    else if (User.IsInRole("Parent"))
    {
        colorByRole = "warning";
    }
}

<div class="row">
    <div class="col col-md-2 bg-primary text-white">
        <h1 class="text-center mx-auto d-block">Teacher</h1>
        <hr />
        <img class="rounded-circle mx-auto d-block" src="data:image/jpg;base64,@Convert.ToBase64String(Model.TeacherProfileFullById.ImageM)" alt="@Model.TeacherProfileFullById.LastName" width="300" height="300">
        <h3 class="text-center"><strong>@name</strong></h3>
        <br />
        <div class="row">
            <div class="col col-md-1"></div>
            <div class="col col-md-10">
                <h5 class="text-justify font-italic">" @Model.TeacherProfileFullById.AboutMe "</h5>
            </div>
            <div class="col col-md-1"></div>
        </div>
        <hr />
        <div class="container">
            <a class="btn btn-large btn-dark text-@colorByRole mx-auto d-block" onclick="window.location='@Url.Action("", "", new { id = Model.TeacherProfileFullById.Id })'">EMAIL!</a>
        </div>
        <br />
        <div class="container">
            <a class="btn btn-large btn-dark text-@colorByRole mx-auto d-block" onclick="window.location='@Url.Action("", "", new { id = Model.TeacherProfileFullById.Id })'">CHAT!</a>
        </div>
        <hr />
    </div>
    <div class="col col-md-10">
        <table class="table table-striped table-bordered">
            <tr>
                <th>Key</th>
                <th>Value</th>
            </tr>
            <tr>
                <td>Name</td>
                <td>@Model.TeacherProfileFullById.FirstName @Model.TeacherProfileFullById.MiddleName @Model.TeacherProfileFullById.LastName</td>
            </tr>
            <tr>
                <td>Gender</td>
                <td>@Model.TeacherProfileFullById.Gender</td>
            </tr>
            <tr>
                <td>Date Of Birth</td>
                <td>@Model.TeacherProfileFullById.DateOfBirth.Year/@Model.TeacherProfileFullById.DateOfBirth.Month/@Model.TeacherProfileFullById.DateOfBirth.Day</td>
            </tr>
            <tr>
                <td>Age</td>
                <td>@Model.TeacherProfileFullById.Age</td>
            </tr>
            <tr>
                <td>Email</td>
                <td>@Model.TeacherProfileFullById.Email</td>
            </tr>
            <tr>
                <td>Phone</td>
                <td>@Model.TeacherProfileFullById.Phone</td>
            </tr>
            <tr>
                <td>Address</td>
                <td>@Model.TeacherProfileFullById.Address</td>
            </tr>
            <tr>
                <td>Subjects</td>
                <td>
                    @for (int i = 0; i < Model.TeacherProfileFullById.SubjectsIds.Count(); i++)
                    {
                        <a href="@Url.Action("Subject", "Subjects", new { id = Model.TeacherProfileFullById.SubjectsIds.ToList()[i] })">
                            <img class="rounded-circle" src="data:image/jpg;base64,@Convert.ToBase64String(Model.TeacherProfileFullById.SubjectsImagesXXS.ToList()[i])" alt="subject" width="50" height="50">
                        </a>
                    }
                </td>
            </tr>
            <tr>
                <td>Class Mastered</td>
                @if (Model.TeacherProfileFullById.ClassMasteredId != 0)
                {
                    <td>
                        <a href="@Url.Action("Class", "Classes", new { id = Model.TeacherProfileFullById.ClassMasteredId })">
                            <img class="rounded-circle" src="data:image/jpg;base64,@Convert.ToBase64String(Model.TeacherProfileFullById.ClassMasteredImageXXS)" alt="class" width="50" height="50">
                        </a>
                    </td>
                }
            </tr>
            <tr>
                <td>Clubs</td>
                <td>
                    @for (int i = 0; i < Model.TeacherProfileFullById.ClubsMasteredIds.Count(); i++)
                    {
                        <a href="@Url.Action("Club", "Clubs", new { id = Model.TeacherProfileFullById.ClubsMasteredIds.ToList()[i] })">
                            <img class="rounded-circle" src="data:image/jpg;base64,@Convert.ToBase64String(Model.TeacherProfileFullById.ClubsMasteredImagesXXS.ToList()[i])" alt="club" width="50" height="50">
                        </a>
                    }
                </td>
            </tr>
            <tr>
                <td>Years in School</td>
                <td>@(DateTime.Now.Year - Model.TeacherProfileFullById.DateOfEmployment.Year)</td>
            </tr>
            <tr>
                <td>Years of Experience</td>
                <td>@(DateTime.Now.Year - Model.TeacherProfileFullById.DateOfCareerStart.Year)</td>
            </tr>
            <tr>
                <td>Average Mark They Gave</td>
                <td>@averageMarkRounded</td>

            </tr>
        </table>
    </div>
</div>
